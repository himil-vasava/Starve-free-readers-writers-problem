-------------Introduction-----------

The readers-writers problem is a classical one in computer science. Here, we have a resource that can be accessed by readers, who do not modify the resource,
 and writers, who can modify the resource. When a writer is modifying the resource, no-one else can access it at the same time- another writer could corrupt
 the resource, and another reader could read a partially modified value. This problem is actually of three types:

(1) Readers priority - When there is at least one reader currently accessing the resource, allow new readers to access it as well. This can cause starvation
if there are writers waiting to modify the resource and new readers arrive all the time, as the writers will never be granted access as long as there is 
atleast one active reader.
(2) Writers priority - Here, readers may starve.
(3) No priority - All readers and writers will be granted access to the resource in their order of arrival. If a writer arrives while readers are accessing
the resource, it wait until those readers free the resource and then modify it. New readers arriving in the meantime will have to wait.

For the third case i.e. we don't want starvation to happen and thus don't want to give anyone priority. For that the variables and functions required are :
-> Semaphore mutex (It is used ensure mutual exclusion to update readcount and writecount variables)
->resource (mutual exclusion semaphore to chech if resource is available or not)
-> wait() - decrements the semaphore value
-> signal() - increments the semaphore value

--------Algorithm------------

-----------Writers-----------

wait(mutex);
writecount++;
signal(mutex);
wait(resource);

//performs the write

wait(mutex);
writecount--;
signal(mutex);
signal(resource)

-----------Readers---------

wait(mutex);
if(writecount>0 || readcount==0)
	signal(mutex);
	wait(resource);
	wait(mutex);

readcount++;
signal(mutex);

//performs the read

wait(mutex);
readcount--;
if(readcount==0)
	signal(resource);
signal(mutex);


-------------Explanation---------------

Writers: First wait(mutex) is called before writecount so it can avoid incorrectness of writecount. After increasing the writecount it checks if resource is 
available or not. If available performs writing else waits. After performing writing it checks for mutex that decrement can be done. Finally, it signals mutex
and resource so that others can use it.

Readers: First read(mutex) is called. And, if allowed to enter checks the condition of writecount>0 or readcount==0. It checks for the resource, if available
calls wait(mutex) as it getting the required resource. After that readcount is updated and then reading is performed. After the reading process is finished, it 
is required to decrease the readcount and thus calls wait(mutex). Now it checks if readcount is 0 or not i.e. if some reading action is still going on and if 
it is 0 then signals that the resource is free and available for others to use. 

--------------------------------------------------------------------------------------------------------------------------------------------------------------




